<?php


$shortdata = array();
$data = array();

$config["settings"]["news.notice"] = "/var/log/news/news.notice";
$config["settings"]["sleep_time"]  = 10;
$config["settings"]["expire"]	   = 5;
$config["Rules"]["Flood"]["connections"] = 8;
$config["Rules"]["Flood"]["bad_auth"] = 1;
$config["Rules"]["Flood"]["groups"] = 150;
$last = 0;

$firstpass = 0;

if ($last == 0) $firstpass = 1;

declare(ticks = 1);
 
pcntl_signal(SIGTERM, 'unix_signals');// Termination ('kill' was called)
pcntl_signal(SIGHUP, 'unix_signals'); // Terminal log-out
pcntl_signal(SIGINT, 'unix_signals'); // Interrupted (Ctrl-C is pressed



while (true) {

	// PHP caches file information in order to provide faster
	// performance; In order to read the new filesize, we need
	// to flush this cache.
	clearstatcache(false, $config["settings"]["news.notice"]);

	$stats["good"] = 0;
	$stats["bad"]  = 0;
	$stats["local"] = 0;
	$stats["nossl"] = 0;

    	// Get the current size of file
    	$current = filesize($config["settings"]["news.notice"]);

    	// Reseted the file?
    	if ($current < $last) {
		$last = $current;
	}

	// If there's new content in the file
    	elseif ($current > $last) {
		// Open the file in read mode
		$fp = fopen($config["settings"]["news.notice"], 'r');

        	// Set the file position indicator to the last position
        	fseek($fp, $last);

        	// While not reached the end of the file
        	while (! feof($fp)) {
            	
			// Read a line
            		$line = fgets($fp);

			// Check whether is an nnrpd line
			if ((strpos($line, "nnrpd[") !== false) or (strpos($line, "nnrpd-ssl[") !== false)) {

				// If line includes 127.0.0.1 it must be trashed in order to avoid self banning
				if (strpos($line, '127.0.0.1') !== true) {

					// Update Database
					$success = scan_line($line);

					// Update counter of good lines
					if ($success == 0) $stats["good"]++;

					// If it's an attempt to esablish a plain connection over the SSL port
					if ($success == 1) $stats["nossl"]++;
					}

					// con gli operatori logici else non funziona
					if (strpos($line, '127.0.0.1') !== false) {
						// local messages counter
						$stats["local"]++;
					}

			} else {
				// Update counter of useless lines
				$stats["bad"]++;
			}
		}

        	// Store the current position of the file for the next pass
       		$last = ftell($fp);

        	// Close the file pointer
        	fclose($fp);
    	}


	// A few statistical data are sent to syslog
	$total_lines = $stats["good"] + $stats["bad"] + $stats["local"] + $stats["nossl"];
	$string = "Scanned " . $config["settings"]["news.notice"] . ": $total_lines total lines, " . $stats["good"] . " nnrpd, " . $stats["bad"] . " other, " . $stats["local"] . " coming from localhost, " . $stats["nossl"] . " PLAIN over SSL port"; 
	log_string("notice", $string);

	// Note: flood check MUST be disabled during the first scan because this script counts only the lines but no times
	// and this avoid false positive results
	if (($firstpass == 0) and (isset($shortdata))) check_short($config);
	$firstpass = 0;

	// If there're new log lines
	if (isset($shortdata)) {

		// Append short time buffer ($shortdata) to global buffer ($data[UNIX_TIME][$ip]);
		$time = time();
		$data[$time][] = array();

		foreach ($shortdata as $ip => $struct) {
		
			$data[$time][$ip]["connessioni"] 	= $shortdata[$ip]["connessioni"];
			$data[$time][$ip]["connection_time"] 	= $shortdata[$ip]["connection_time"];
			$data[$time][$ip]["bad_auth"]           = $shortdata[$ip]["bad_auth"];
			$data[$time][$ip]["unknown_commands"]   = $shortdata[$ip]["unknown_commands"];
			$data[$time][$ip]["already_banned"]     = $shortdata[$ip]["already_banned"];
			$data[$time][$ip]["articles_size"]      = $shortdata[$ip]["articles_size"];
			$data[$time][$ip]["articles_hits"]      = $shortdata[$ip]["articles_hits"];
			$data[$time][$ip]["overview_size"]      = $shortdata[$ip]["overview_size"];
			$data[$time][$ip]["overview_hits"]      = $shortdata[$ip]["overview_hits"];
			$data[$time][$ip]["groups"]      	= $shortdata[$ip]["groups"];
			$data[$time][$ip]["sys_time"]      	= $shortdata[$ip]["sys_time"];
			$data[$time][$ip]["usr_time"]      	= $shortdata[$ip]["usr_time"];
		}

		// Debug
		foreach($data as $time => $stuff) {
			foreach($stuff as $ip => $other) {
				if ($ip == 0) unset($data[$time][0]);
			}
		}

		// Remove contents from  short time buffer
		unset($shortdata);
	}

	// Expire old records
	foreach($data as $time => $stuff) {
		$exp = time() - $config["settings"]["expire"];
		if ($time < $exp) {
			unset($data[$time]);
			log_string("notice", "Bag $time is expired, deleting");
		}
	}

	foreach($data as $time => $stuff) {
		foreach($stuff as $ip => $struct) {
			echo "$time\t$ip";
			foreach($struct as $key => $value) {
				echo "\t$value";
			}
			echo "\n";
		}
	}

	// Sleep till the next run
	sleep($config["settings"]["sleep_time"]);
}

function check_short($config)
{
	global $shortdata;

	// Extract IP address
	foreach($shortdata as $ip => $stuff) {

		// Too many connections (flood)
		if ($shortdata[$ip]["connessioni"] > $config["Rules"]["Flood"]["connections"]) {
			log_string("notice", "$ip banned due flood: " . $shortdata[$ip]["connessioni"] . " connections, max " . $config["Rules"]["Flood"]["connections"]);
		}

		// Too many failed attempts to authenticate (flood)
        	if ($shortdata[$ip]["bad_auth"] > $config["Rules"]["Flood"]["bad_auth"]) {
                        log_string("notice", "$ip banned due flood: " . $shortdata[$ip]["bad_auth"] . " bad auths, max " . $config["Rules"]["Flood"]["bad_auth"]);
                }

		// Too many groups (flood)
                if ($shortdata[$ip]["groups"] > $config["Rules"]["Flood"]["groups"]) {
                        log_string("notice", "$ip banned due flood: " . $shortdata[$ip]["groups"] . " groups, max " . $config["Rules"]["Flood"]["groups"]);
                }

	}

}

function ban_ip($ip)
{

}

function scan_line($line)
{
	// When a day of month is one digit long, syslog adds a space (Dec  1 -> Dec 17) that must be stripped
	$line = str_replace("  ", " ", $line);

	// AN IP is connectiong...
	// Dec 17 10:43:37 gioia nnrpd[27723]: 79.45.158.7 (79.45.158.7) connect - port 119
	if (strpos($line, ' connect ') !== false) {
		if (strpos($line, "("))	{
			$first  = strpos($line, "(") + 1;
			$last   = strpos($line, ")");
			$lenght = $last - $first;
			$ip     = substr($line, $first, $lenght);
			$success = update_database($ip, "connessioni", 1);
		}
	}

	// An user has sent wrong userid/password
	// Dec 17 14:37:52 gioia nnrpd-ssl[27954]: 104.43.249.91 bad_auth
	if (strpos($line, 'bad_auth') !== false) {
		$words = explode(" ", $line);
		$ip = $words[5];
		$success = update_database($ip, "bad_auth", 1);
	}


	// An user has sent some unknown command
	// Dec 17 14:43:06 gioia nnrpd-ssl[29582]: 52.129.34.145 unrecognized XYZZY
	if (strpos($line, 'unrecognized') !== false) {
		$words = explode(" ", $line);
		$ip = $words[5];
		$success = update_database($ip, "unknown_commands", 1);
	}


	// An user who was already banned is trying to connect again
	// Dec 17 04:19:28 gioia nnrpd[58557]: 178.235.55.163 rejected by rule (Too much user time)
	if (strpos($line, 'rejected by rule') !== false) {
		$words = explode(" ", $line);
		$ip = $words[5];
		$success = update_database($ip, "already_banned", 1);
	}

	
	// NNRPD stats line about IP, number of articles, size of articles downloaded by this connection
	// Dec 17 15:08:01 gioia nnrpd[36386]: 82.69.119.192 artstats get 4 time 0 size 7254
	if (strpos($line, 'artstats') !== false) {
		$words = explode(" ", $line);
		$ip = $words[5];
		$arthits = $words[8];
		$artsize = $words[12];
		$success = update_database($ip, "articles_hits", $arthits);
		$success = update_database($ip, "articles_size", $artsize);
	}


	// NNRPD stats line about overview: IP, number of queries, size of replies
	// Dec 17 15:13:42 gioia nnrpd[37246]: 97.119.34.101 overstats count 1 hit 24 miss 0 time 0 size 13221 dbz 0 seek 0 get 0 artcheck 0
	if (strpos($line, 'overstats') !== false) {
		$words = explode(" ", $line);
		$ip = $words[5];
		$overhits = $words[8];
		$oversize = $words[16];
		$success  = update_database($ip, "overview_hits", $overhits);
		$success  = update_database($ip, "overview_size", $oversize);
	}

	
	// An user requested a group
	// Dec  5 01:05:05 gioia nnrpd[53234]: 77.75.201.220 group de.soc.weltanschauung.islam 0
	if (strpos($line, ' group ') !== false) {
		$words = explode(" ", $line);
		$ip = $words[5];
		$success = update_database($ip, "groups", 1);
	}

	// Final statistic line: connection time, CPU Time user/system
	// Dec  4 12:46:22 gioia nnrpd[36430]: 79.50.216.219 times user 0.008 system 0.008 idle 0.000 elapsed 931.864
	if (strpos($line, ' times user ') !== false) {
		$words = explode(" ", $line);
		
		// INN 2.5.4 has a bug that prevent an IP address to be recorded in the log when it tries to esablish a plain connection over
		// SSL port (i.e telnet nntp.aioe.org 563), these lines must be stripped at the moment
		$x = count($words);
		if ($x == 14) return(1);

		$ip = $words[5];
		$sys_time = $words[10];
		$usr_time = $words[8];
		$con_time = $words[14];
		$conn_tim = trim($con_time);
		$success  = update_database($ip, "connection_time", $conn_tim);
		$success  = update_database($ip, "usr_time", $usr_time);
		$success  = update_database($ip, "sys_time", $sys_time);
	}

	return(0);
}

function update_database($ip, $tipo, $numero)
{
	global $shortdata;

	// if an IP is not seen before, initialize $shortdata[$ip]
	if (!isset($shortdata[$ip]))
	{
        	$shortdata[$ip]["connessioni"] = "0";
        	$shortdata[$ip]["connection_time"] = "0";
        	$shortdata[$ip]["bad_auth"] = "0";
        	$shortdata[$ip]["unknown_commands"] = "0";
        	$shortdata[$ip]["already_banned"] = "0";
        	$shortdata[$ip]["articles_size"] = "0";
        	$shortdata[$ip]["articles_hits"] = "0";
        	$shortdata[$ip]["overview_hits"] = "0";
        	$shortdata[$ip]["overview_size"] = "0";
        	$shortdata[$ip]["groups"] = "0";
        	$shortdata[$ip]["sys_time"] = "0";
        	$shortdata[$ip]["usr_time"] = "0";
	}

	// Update record $tipo of row $ip
	if (!isset($shortdata[$ip][$tipo])) $shortdata[$ip][$tipo] =  $numero;
	if ( isset($shortdata[$ip][$tipo])) $shortdata[$ip][$tipo] += $numero;

	return 0;
}


function log_string($facility, $string)
{
	echo "$facility - $string\n";
}

function unix_signals($signal) {

	global $data;
	global $shortdata;

	switch ($signal) {
         	case SIGTERM:
	        case SIGHUP:
         	case SIGINT:
				log_string("notice", "Received signal $signal");
				// Append short time buffer ($shortdata) to global buffer ($data);
				if (is_array($shortdata)) $data = array_merge($data, $shortdata);
             	     break;
     }

     exit(0);

}




?>
